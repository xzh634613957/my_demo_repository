"""
    * **局部变量** 是在 **函数内部** 定义的变量，**只能在函数内部使用**
        * **局部变量** 是在 **函数内部** 定义的变量，**只能在函数内部使用**
        * 函数执行结束后，**函数内部的局部变量，会被系统回收**
        * 不同的函数，可以定义相同的名字的局部变量，但是 **彼此之间** 不会产生影响
        * **局部变量** 在 **函数执行时** 才会被创建
        * **函数执行结束后** 局部变量 **被系统回收**
        * **局部变量在生命周期** 内，可以用来存储 **函数内部临时使用到的数据**

    * **全局变量** 是在 **函数外部定义** 的变量（没有定义在某一个函数内），**所有函数** 内部 **都可以使用这个变量**
        * **全局变量** 是在 **函数外部定义** 的变量（没有定义在某一个函数内），**所有函数** 内部 **都可以使用这个变量**
             > 提示：在其他的开发语言中，大多 **不推荐使用全局变量** —— 可变范围太大，导致程序不好维护！
        * 在函数内部，可以 **通过全局变量的引用获取对应的数据**
        * 但是，**不允许直接修改全局变量的引用** —— 使用赋值语句修改全局变量的值
        * 如果在函数中需要修改全局变量，需要使用 `global` 进行声明
        * 为了保证所有的函数都能够正确使用到全局变量，应该 **将全局变量定义在其他函数的上方**
        * 为了避免局部变量和全局变量出现混淆，在定义全局变量时，有些公司会有一些开发要求，例如：
        * 全局变量名前应该增加 `g_` 或者 `gl_` 的前缀
"""

"""
    代码结构:
            1. shebang
            2. import
            3. global variable
            4. define function
            5. executable code
"""

# 修改全局变量的值需要使用 global 声明
num = 10


def demo1():
    global num
    num = 99
    print(num)


def demo2():
    print("demo2: %d" % num)


demo1()
demo2()
