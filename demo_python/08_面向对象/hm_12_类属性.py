"""
    类是一个特殊的对象
"""
"""
    `Python` 中 **一切皆对象**：
        * `class AAA:` 定义的类属于 **类对象**
        * `obj1 = AAA()` 属于 **实例对象**
"""
"""
    * 除了封装 **实例** 的 **属性** 和 **方法**外，**类对象** 还可以拥有自己的 **属性** 和 **方法**
          1. **类属性**
          2. **类方法**
        * 通过 **类名.** 的方式可以 **访问类的属性** 或者 **调用类的方法**
"""
"""
    * **类属性** 就是给 **类对象** 中定义的 **属性**
    * 通常用来记录 **与这个类相关** 的特征
    * **类属性** **不会用于**记录 **具体对象的特征**
"""

"""
    **示例需求**    
        * 定义一个 **工具类**
        * 每件工具都有自己的 `name`
        * **需求** —— 知道使用这个类，创建了多少个工具对象？
"""
"""
    如果使用 `对象.类属性 = 值` 赋值语句，只会 **给对象添加一个属性**，而不会影响到 **类属性的值**
"""

class Tool(object):

    # 使用赋值语句来定义类的属性, 记录创建工具对象的总数
    count = 0  # 这是类的属性, 而不是对象的属性

    def __init__(self, name):
        self.name = name

        # 每实例化一个对象, 当自动调用构造函数时, 使类的属性count+1
        Tool.count += 1


# 实例化对象
tool1 = Tool("斧头")
tool2 = Tool("锤子")

print(Tool.count)
print(tool1.count)  # 根据 python 的查找属性的机制, 使用实例化的对象也可以调用类的属性, 但是并不推荐这种方式

